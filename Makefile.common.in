#CC = @CC@
CC = gcc
ifneq "$(findstring cygwin, $(SYN68K_TARGET))"  ""
  CC += -m486
endif
LIB_CC = @CC@
INCLUDE_DIR=$(topdir)/include
CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)
RANLIB = /usr/bin/ranlib
#RANLIB = @RANLIB@
LIBS =
SYN68K_TARGET=@host@
OFILE_DIR = .
LIBDIR = .
HOSTCPU = $(SYN68K_TARGET)
host-native=native/i386

#-----------------------------------------------------------------
#Makefile.common.alpha-redhat-linux
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "alpha-redhat-linux"

LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

# NOTE: QUADALIGN DOESN'T WORK RIGHT NOW
# LIB_CFLAGS = -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -DQUADALIGN

# OPTIMIZE = ./i486-optimize.pl
# CLEANUP = ./i486-cleanup.pl
# LDFLAGS = -Lhost-native
# LDFLAGS = -taso
SYN68K_CFLAGS = $(LIB_CFLAGS) -O2 -fomit-frame-pointer
# SYN68K_CFLAGS = -g -Wall -DQUADALIGN

NO_NATIVE = TRUE
endif
#-----------------------------------------------------------------
#Makefile.common.alpha.orig
#-----------------------------------------------------------------
# ifeq "$(SYN68K_TARGET)" ""
# CC = cc
# OFILE_DIR = obj/alpha
# LIBDIR = ../lib/alpha

# HOSTCPU = alpha
# RANLIB = /bin/ranlib
# LDFLAGS = -taso
# endif
#-----------------------------------------------------------------
#Makefile.common.i386-msdos-go32
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i386-msdos-go32"

LIB_CC = i386-msdos-go32-gcc -m486
LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

AR = ar
AS = i386-msdos-go32-gcc -x assembler
RANLIB = ranlib

LDFLAGS = -Ttext 0 -Tdata 200000
CLEANUP = ./i486-cleanup.pl
OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
#-----------------------------------------------------------------
#Makefile.common.i386-next-mach-o.dynamic
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i386-next-mach-o.dynamic"

LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

OFILE_DIR = obj/i386-next-mach-o
LIBDIR = $(topdir)/lib/i386-next-mach-o
HOSTCPU = i386-next-mach-o

RANLIB = /bin/ranlib

OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = 
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
#-----------------------------------------------------------------
#Makefile.common.i386-next-mach-o.static
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i386-next-mach-o.static"
CFLAGS = -static -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)


LIB_CFLAGS = -static -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

OFILE_DIR = obj/i386-next-mach-o
LIBDIR = $(topdir)/lib/i386-next-mach-o
HOSTCPU = i386-next-mach-o

RANLIB = /bin/ranlib

OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = 
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
#-----------------------------------------------------------------
#Makefile.common.i486-pc-cygwin32
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-pc-cygwin32"
CC = gcc -m486

LIB_CC = i486-pc-cygwin32-gcc -m486
LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -Dfree=free_hack

AR = ar
AS = i486-pc-cygwin32-gcc -x assembler
RANLIB = i486-pc-cygwin32-ranlib

CLEANUP = ./i486-cleanup.pl
OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = -O2 -fomit-frame-pointer -Dfree=free_hack
endif
#-----------------------------------------------------------------
#Makefile.common.i486-cygwin32-debug
#-----------------------------------------------------------------
# NOTE: we define __CHECKER__ so that we get a frame pointer and other
# good stuff.  We're not actually using checker.  D'oh.
ifeq "$(SYN68K_TARGET)" "i486-cygwin32-debug"
CC = gcc -m486

LIB_CC = i486-pc-cygwin32-gcc -m486
LIB_CFLAGS = -g -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__ -Dfree=free_hack

AR = ar
AS = i486-pc-cygwin32-gcc -x assembler
RANLIB = i486-pc-cygwin32-ranlib

CLEANUP = ./i486-cleanup.pl
# OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = $(LIB_CFLAGS) -O
LDFLAGS = -Lhost-native
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-a.out
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-linux-a.out"

LIB_CC = gcc -b i486-linuxaout
LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = -Lhost-native
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-a.out-debug
#-----------------------------------------------------------------
# NOTE: we define __CHECKER__ so that we get a frame pointer and other
# good stuff.  We're not actually using checker.  D'oh.
ifeq "$(SYN68K_TARGET)" "i486-linux-a.out-debug"

LIB_CC = gcc -b i486-linuxaout
LIB_CFLAGS = -g -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__

SYN68K_CFLAGS = $(LIB_CFLAGS) -O

OFILE_DIR = obj/i486-linux-debug
LIBDIR = $(topdir)/lib/i486-linux-debug

HOSTCPU = i486-linux-debug

AR = ar
RANLIB = ranlib

# don't optimize syn68k.s when compiling with checker
# OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl

LDFLAGS = -Lhost-native
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-elf
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-linux-elf"

LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = -Lhost-native
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-elf-debug
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-linux-elf-debug"
CFLAGS = -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

LIB_CFLAGS = -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__

OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = -Lhost-native
SYN68K_CFLAGS = $(LIB_CFLAGS)
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-glibc-nonnative
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-linux-glibc-nonnative"

LIB_CFLAGS = -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__

OFILE_DIR = obj/i486-linux-glibc-nonnative
LIBDIR = $(topdir)/lib/i486-linux-glibc-nonnative

HOSTCPU = i486-linux-elf

# OPTIMIZE = ./i486-optimize.pl
# CLEANUP = ./i486-cleanup.pl
# LDFLAGS = -Lhost-native
SYN68K_CFLAGS = -O
host-native=native/null
NO_NATIVE = TRUE
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-glibc
#-----------------------------------------------------------------
var_host=@host_alias@
ifeq "$(var_host)" ""
LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

LIB_CC = @CC@
LIB_CFLAGS = -O6 -finline-functions -g -Wall -I$(topdir)/include $(LOCAL_CFLAGS)
CLEANUP = ./i486-cleanup.pl
OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif

#-----------------------------------------------------------------
#Makefile.common.i486-linux-glibc-ccr8
#-----------------------------------------------------------------
# NOTE: we define __CHECKER__ so that we get a frame pointer and other
# good stuff.  We're not actually using checker.  D'oh.
ifeq "$(SYN68K_TARGET)" "i486-linux-glibc-ccr8"

LIB_CFLAGS = -g -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__ -DNO_FAST_CC_FUNCS

# OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = -Lhost-native
SYN68K_CFLAGS = $(LIB_CFLAGS) -O
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-glibc-debug
#-----------------------------------------------------------------
# NOTE: we define __CHECKER__ so that we get a frame pointer and other
# good stuff.  We're not actually using checker.  D'oh.
ifeq "$(SYN68K_TARGET)" "i486-linux-glibc-debug"

LIB_CFLAGS = -g -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__

# OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = -Lhost-native
SYN68K_CFLAGS = $(LIB_CFLAGS) 
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-glibc-nonnative
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-linux-glibc-nonnative"
CFLAGS = -O2 -g -Wall -I$(topdir)/include $(LOCAL_CFLAGS) -D__CHECKER__ -DNONNATIVE

LIB_CFLAGS = -g -Wall -I$(topdir)/include $(LOCAL_CFLAGS) -D__CHECKER__ -DNONNATIVE
 
 
# OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
# LDFLAGS = -Lhost-native
SYN68K_CFLAGS = -DNONNATIVE -g -D__CHECKER__

host-native=native/null
NO_NATIVE = TRUE
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-glibc-slowccr
#-----------------------------------------------------------------
# NOTE: we define __CHECKER__ so that we get a frame pointer and other
# good stuff.  We're not actually using checker.  D'oh.
ifeq "$(SYN68K_TARGET)" "i486-linux-glibc-slowccr"

LIB_CFLAGS = -g -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__ -DNO_CCR_SPEEDUPS
# OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = -Lhost-native
SYN68K_CFLAGS = $(LIB_CFLAGS) -O
endif
#-----------------------------------------------------------------
#Makefile.common.i486-linux-slam
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-linux-slam"

LIB_CC = checkergcc
LIB_CFLAGS = -g -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

SYN68K_FLAGS = $(LIB_CFLAGS)

OFILE_DIR = obj/i486-linux
LIBDIR = $(topdir)/lib/i486-linux

HOSTCPU = i486-linux

AR = /usr/local/lib/checker/ar
RANLIB = /usr/local/lib/checker/ranlib

# don't optimize syn68k.s when compiling with checker
# OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl

LDFLAGS = -Lhost-native
SYN68K_CFLAGS =
endif
#-----------------------------------------------------------------
#Makefile.common.i486-pc-new-cygwin32
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-pc-new-cygwin32"
CC = gcc -m486

LIB_CC = i486-pc-cygwin32-gcc -m486 -I/usr/local/i486-pc-cygwin32/include/mingw32
LIB_CFLAGS = -O6 -finline-functions -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

AR = ar
AS = i486-pc-cygwin32-gcc -x assembler
RANLIB = i486-pc-cygwin32-ranlib

CLEANUP = ./i486-cleanup.pl
OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
#-----------------------------------------------------------------
#Makefile.common.i486-pc-new-cygwin32-debug
#-----------------------------------------------------------------
# NOTE: we define __CHECKER__ so that we get a frame pointer and other
# good stuff.  We're not actually using checker.  D'oh.
ifeq "$(SYN68K_TARGET)" "i486-pc-new-cygwin32-debug"
CC = gcc -m486

LIB_CC = i486-pc-cygwin32-gcc -m486 -I/usr/local/i486-pc-cygwin32/include/mingw32
LIB_CFLAGS = -g -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__

AR = ar
AS = i486-pc-cygwin32-gcc -x assembler
RANLIB = i486-pc-cygwin32-ranlib

CLEANUP = ./i486-cleanup.pl
# OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = $(LIB_CFLAGS) -O
LDFLAGS = -Lhost-native
endif
#-----------------------------------------------------------------
#Makefile.common.i486-next-ns3
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i486-next-ns3"

LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

RANLIB = /bin/ranlib

OPTIMIZE = ./i486-optimize.pl
CLEANUP = ./i486-cleanup.pl
LDFLAGS = 
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
#-----------------------------------------------------------------
#Makefile.common.i586-cygwin32
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i586-cygwin32"
CC = gcc -m486

LIB_CC = i586-cygwin32-gcc -m486
LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

AR = ar
AS = i586-cygwin32-gcc -x assembler
RANLIB = i586-cygwin32-ranlib

CLEANUP = ./i486-cleanup.pl
OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
#-----------------------------------------------------------------
#Makefile.common.i586-cygwin32-debug
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i586-cygwin32-debug"
CC = gcc -m486

LIB_CC = i486-pc-cygwin32-gcc -m486
LIB_CFLAGS = -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__

AR = ar
AS = i486-pc-cygwin32-gcc -x assembler
RANLIB = i486-pc-cygwin32-ranlib

CLEANUP = ./i486-cleanup.pl
OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = -O
endif
#-----------------------------------------------------------------
#Makefile.common.i860
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "i860"
OFILE_DIR = obj/i860
LIBDIR = ../lib/i860
LIBS = -L/usr/ucblib -lucb
HOSTCPU = i860
endif
#-----------------------------------------------------------------
#Makefile.common.m68k-next-ns3
#-----------------------------------------------------------------
ifeq "$(SYN68K_TARGET)" "m68k-next-ns3"

LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

RANLIB = /bin/ranlib -c
host-native=native/null
endif
#-----------------------------------------------------------------
#Makefile.common.powerpc-linux-glibc
#-----------------------------------------------------------------
# NOTE: we define __CHECKER__ so that we get a frame pointer and other
# good stuff.  We're not actually using checker.  D'oh.
ifeq "$(SYN68K_TARGET)" "powerpc-linux-glibc"

LIB_CFLAGS = -O2 -g -Wall -I$(INCLUDE_DIR) $(LOCAL_CFLAGS)

# OPTIMIZE = ./powerpc-optimize.pl
# CLEANUP = ./powerpc-cleanup.pl
# LDFLAGS = -Lhost-native
SYN68K_CFLAGS = $(LIB_CFLAGS) -O2 -fomit-frame-pointer

NO_NATIVE = TRUE
endif
#-----------------------------------------------------------------
#Makefile.common.powerpc-linux-glibc-debug
#-----------------------------------------------------------------
# NOTE: we define __CHECKER__ so that we get a frame pointer and other
# good stuff.  We're not actually using checker.  D'oh.
ifeq "$(SYN68K_TARGET)" "powerpc-linux-glibc-debug"

LIB_CFLAGS = -g -I$(INCLUDE_DIR) $(LOCAL_CFLAGS) -D__CHECKER__

OFILE_DIR = obj/powerpc-linux-glibc-debug
LIBDIR = $(topdir)/lib/powerpc-linux-glibc-debug

HOSTCPU = powerpc-linux-elf-debug

# OPTIMIZE = ./powerpc-optimize.pl
# CLEANUP = ./powerpc-cleanup.pl
# LDFLAGS = -Lhost-native
SYN68K_CFLAGS = $(LIB_CFLAGS) -O

NO_NATIVE = TRUE
endif
#-----------------------------------------------------------------
#Makefile.common.i386-pc-mingw32
#-----------------------------------------------------------------
#ifeq "$(SYN68K_TARGET)" "i386-pc-mingw32" 
#LIB_CC = i386-pc-mingw32-gcc
#LIB_CFLAGS = -O6 -finline-functions -g -Wall -I$(topdir)/include $(LOCAL_CFLAGS) 

#AR = ar
#AS = i386-pc-mingw32-gcc -x assembler
#RANLIB = i386-pc-mingw32-ranlib
 
#CLEANUP = ./i486-cleanup.pl
#OPTIMIZE = ./i486-optimize.pl
#SYN68K_CFLAGS = -O2 -fomit-frame-pointer
#endif
#---
var_host_os=@host_os@
ifeq "$(var_host_os)" "mingw32"
LIB_CC = @host@-gcc
LIB_CFLAGS = -O6 -finline-functions -g -Wall -I$(topdir)/include $(LOCAL_CFLAGS)
AR = ar
AS = i386-pc-mingw32-gcc -x assembler
RANLIB = @host@-ranlib
CLEANUP = ./i486-cleanup.pl
OPTIMIZE = ./i486-optimize.pl
SYN68K_CFLAGS = -O2 -fomit-frame-pointer
endif
