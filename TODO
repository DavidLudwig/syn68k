        May be able to avoid dce problems if we use && for labels (that
        may also get rid of our need for the cleanup code, too)

        Need to make it so that the minimal required compilation options for
        x86_64 (-fno-dce) are set up by default

                should probably report dead code elimination bug before I
                forget the details (I've probably already lost the minimal
                test case) (the details being that if you update a global
                register and then use a label pointer to jump away, the
                update can get eliminated even though the register can
                still be accessed


        cleanup and optimize shouldn't be done via environment variables;
        they should be done with AC_ARG_ENABLE and default to be turned on
        on the architectures where they work (and should be made to work on
        the architectures they support)

        only invoke the x86 cleanup & optimize when compiling for an
        x86 architecture

                can probably write cleanup scripts for other architectures,
                don't think it's worth doing optimize though (which may no
                longer be a good idea w/ newer compilers)

        Fix i486-cleanup.pl and i486-optimize.pl for all x86 targets
        (including Mac OS X)

        See if we can find an address to map that is available to all our
        currently tested targets (i386-native, i386-notnative, x86_64,
        ppc)

	Make so we can build the various debug versions, non-native, etc.

        	figure out *exactly* which options should be available
        	via configure

        Not sure what we should do with x86_64 machines; need to know more
        about what the popular distributions do

	Figure out exactly which variables Makefile.common.in sets, then
	get rid of Makefile.common.in

		see TODO.variables

		figure out what to do concerning bswap

	Look into what else from syn68k we can delete

		Makefile.common.in

		config

	Make sure make clean really does a make clean

	Make sure we get proper dependencies (if possible)

	write-up what is needed to do testing on a real m68k

	need a .spec file so we can build syn68k and syn68k-devel
	RPMS
